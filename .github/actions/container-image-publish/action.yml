name: Container image publish
description: Build and publish container image

inputs:
  ref:
    required: true
    description: 'ref for which to build the image'
  base-ref:
    required: false
    description: 'base ref of a pull request'
  latest:
    required: false
    default: false
    description: >
      This is the latest release overall and therefore gets the latest tag
  latest-major:
    required: false
    default: false
    description: >
      This is the latest in a major release series and therefore gets the major
      version tag
  event:
    required: false
    default: ${{ github.event_name }}
    description: 'The event that triggered the build'
  registry:
    required: false
    default: ghcr.io
    description: 'Container registry to use'
  registry_username:
    required: false
    default: ${{ github.actor }}
    description: 'User name to use for login to the registry'
  registry_password:
    required: true
    description: 'Password to use for login to the registry'
  image_name:
    required: false
    default: ${{ github.repository }}
    description: 'Name of the image to build in <account>/<repo> syntax'

runs:
  using: composite
  steps:
    # Dockerfile and its dependencies live in the Installer
    - name: Checkout Installer repository
      uses: actions/checkout@v3
      with:
        repository: scVENUS/PeekabooAV-Installer
        # get all history, branches and tags because we figure out which to
        # use later on
        fetch-depth: 0

    - name: Select Installer version
      env:
        REF: ${{ inputs.ref }}
        BASE_REF: ${{ inputs.base-ref }}
      shell: bash
      run: |
        # for pull requests decide which Installer version to use based on the
        # target branch
        if [ -z "${REF%refs/pull/*}" -a -n "$BASE_REF" ] ; then
          echo "::notice::Considering base ref $BASE_REF of $REF"
          REF=refs/heads/$BASE_REF
        fi

        # use the Installers's devel branch when triggered on our devel
        # branch - so we just don't do anything here
        if [ "$REF" = refs/heads/master ] ; then
          echo "::notice::Staying on devel branch"
          exit 0
        fi

        # use the latest corresponding Installer point release when
        # triggered on a tag or release branch, split these up if the
        # Installer starts using release branches as well
        if echo "$REF" | grep \
              -e '^refs/tags/v[0-9]\+\.[0-9]\+' \
              -e '^refs/heads/[0-9]\+\.[0-9]\+$' \
            > /dev/null ; then
          prelease=${REF#refs/heads/}
          prelease=${prelease#refs/tags/v}

          # drop point release
          echo "$prelease" | grep '^[0-9]\+\.[0-9]\+\.[0-9]\+$' > /dev/null && \
            prelease=${prelease%.[0-9]*}

          venv=$(mktemp -d)
          python3 -mvenv "$venv"
          "$venv"/bin/pip install packaging

          # look for installer point release to use
          findrel=$(mktemp)
          cat <<EOF | sed -e "s,^    ,," > "$findrel"
            import sys
            import packaging.version

            versions=[]
            for line in sys.stdin:
              if line.startswith('v$prelease'):
                versions.append(packaging.version.parse(line))

            if versions:
              versions = sorted(versions, reverse=True)
              print(versions[0])
        EOF

          irelease=$(git tag | "$venv"/bin/python3 "$findrel")

          # stay on devel branch of installer if no matching release can be
          # found
          if [ -z "$irelease" ] ; then
            echo "::notice::No matching Installer version found - " \
              "staying on devel branch"
            exit 0
          fi

          git checkout v"$irelease"
          exit 0
        fi

        # fail loudly in unsupported case
        exit 1

    # put PeekabooAV below that as expected by the installer
    - name: Check out PeekabooAV
      uses: actions/checkout@v3
      with:
        path: PeekabooAV
        # for scheduled builds, github.ref/$GITHUB_REF is always latest commit
        # on default branch
        ref: ${{ inputs.ref }}

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: inputs.event != 'pull_request'
      uses: sigstore/cosign-installer@v2.3.0

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ inputs.registry }}
      if: inputs.event != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Select image tagging scheme
      id: tags
      env:
        REF: ${{ inputs.ref }}
        LATEST_MAJOR: ${{ inputs.latest-major }}
      shell: bash
      run: |
        # use pep440/semver versioning, particularly only moving latest to
        # release versions (no prerelease and no branches).
        # build edge from last commit on devel branch
        echo "::notice::Defaulting to pep440/edge/ref tagging scheme"
        tags="type=pep440,pattern={{version}}
          type=edge
          type=ref,event=branch
          type=ref,event=pr"

        if [ "$LATEST_MAJOR" = "true" ] ; then
          echo "::notice::Release is latest major version"
          tags="$tags
            type=pep440,pattern={{major}}"
        fi

        # build release branch edges
        if echo "$REF" | grep \
              -e '^refs/heads/[0-9]\+\.[0-9]\+$' \
            > /dev/null ; then
          echo "::notice::Switching to release edge tagging scheme"
          tags="type=ref,event=branch,suffix=-edge"
        fi

        # preserve newlines
        tags=${tags//$'\n'/'%0A'}

        echo "::set-output name=tags::$tags"

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: michaelweiser/metadata-action@ref-input
      with:
        images: ${{ inputs.registry }}/${{ inputs.image_name }}
        tags: |
          ${{ steps.tags.outputs.tags }}
        ref: ${{ inputs.ref }}
        # tagging-triggered builds never move the latest tag. Instead we wait
        # for the next scheduled image rebuild because it has the overview what
        # the latest version actually is.
        flavor: |
          latest=${{ inputs.latest }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: ${{ inputs.event != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # metadata-action sanitizes the image name but doesn't communicate it
    # separately, extract it from tags, contains registry as a boon
    - name: Get sanitized image name
      id: imagename
      env:
        TAGS: ${{ steps.meta.outputs.tags }}
      shell: bash
      run: |
        # we assume here that all tags use the same image name
        imagename=$(echo "$TAGS" | head -1 | cut -d: -f 1)
        echo "::set-output name=imagename::$imagename"

        # diagnostics
        echo "::group::Extracted image name"
        echo "$imagename"
        echo "::endgroup::"

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the
    # Docker repository is public to avoid leaking data. If you would like
    # to publish transparency data even for private images, pass --force to
    # cosign below.  https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ inputs.event != 'pull_request' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      # This step uses the identity token to provision an ephemeral
      # certificate against the sigstore community Fulcio instance.
      shell: bash
      run: cosign sign ${{ steps.imagename.outputs.imagename }}@${{
        steps.build-and-push.outputs.digest }}
